package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.annotation.processing.Generated;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
public final class ParameterizedModule_ProvideMapFactory<T1, T2 extends Bar<T1>> implements Factory<Object> {
  private final ParameterizedModule<T1, T2> module;

  private final Provider<T1> t1Provider;

  private ParameterizedModule_ProvideMapFactory(ParameterizedModule<T1, T2> module,
      Provider<T1> t1Provider) {
    this.module = module;
    this.t1Provider = t1Provider;
  }

  @Override
  public Object get() {
    return ParameterizedModule_ProvideMapFactory.<T1, T2>provideMap(module, t1Provider.get());
  }

  public static <T1, T2 extends Bar<T1>> ParameterizedModule_ProvideMapFactory<T1, T2> create(
      Object module, Provider<?> t1Provider) {
    return new ParameterizedModule_ProvideMapFactory<T1, T2>((ParameterizedModule<T1, T2>) (module), (Provider<T1>) (t1Provider));
  }

  public static <T1, T2 extends Bar<T1>> Object provideMap(Object instance, Object t1) {
    return Preconditions.checkNotNullFromProvides(((ParameterizedModule<T1, T2>) (instance)).provideMap((T1) (t1)));
  }
}
