package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.annotation.processing.Generated;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
public final class ParameterizedModule_ProvideListTFactory<T extends Bar> implements Factory<Object> {
  private final ParameterizedModule<T> module;

  private final Provider<T> tProvider;

  private ParameterizedModule_ProvideListTFactory(ParameterizedModule<T> module,
      Provider<T> tProvider) {
    this.module = module;
    this.tProvider = tProvider;
  }

  @Override
  public Object get() {
    return ParameterizedModule_ProvideListTFactory.<T>provideListT(module, tProvider.get());
  }

  public static <T extends Bar> ParameterizedModule_ProvideListTFactory<T> create(Object module,
      Provider<?> tProvider) {
    return new ParameterizedModule_ProvideListTFactory<T>((ParameterizedModule<T>) (module), (Provider<T>) (tProvider));
  }

  public static <T extends Bar> Object provideListT(Object instance, Object t) {
    return Preconditions.checkNotNullFromProvides(((ParameterizedModule<T>) (instance)).provideListT((T) (t)));
  }
}
