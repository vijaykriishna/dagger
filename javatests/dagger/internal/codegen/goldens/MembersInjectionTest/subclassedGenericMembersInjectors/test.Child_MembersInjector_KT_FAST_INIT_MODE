package test;

import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.Provider;
import dagger.internal.QualifierMetadata;
import javax.annotation.processing.Generated;

@QualifierMetadata
@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
public final class Child_MembersInjector<T> implements MembersInjector<Child<T>> {
  private final Provider<T> xProvider;

  private final Provider<A> yProvider;

  private final Provider<A2> a2Provider;

  private final Provider<A> aProvider;

  private final Provider<T> tProvider;

  private Child_MembersInjector(Provider<T> xProvider, Provider<A> yProvider,
      Provider<A2> a2Provider, Provider<A> aProvider, Provider<T> tProvider) {
    this.xProvider = xProvider;
    this.yProvider = yProvider;
    this.a2Provider = a2Provider;
    this.aProvider = aProvider;
    this.tProvider = tProvider;
  }

  @Override
  public void injectMembers(Child<T> instance) {
    Parent_MembersInjector.<T, Object>injectX(instance, xProvider.get());
    Parent_MembersInjector.<T, Object>injectY(instance, yProvider.get());
    Parent_MembersInjector.<T, Object>injectA2(instance, a2Provider.get());
    Child_MembersInjector.<T>injectA(instance, aProvider.get());
    Child_MembersInjector.<T>injectT(instance, tProvider.get());
  }

  public static <T> MembersInjector<Child<T>> create(Provider<?> xProvider, Provider<?> yProvider,
      Provider<?> a2Provider, Provider<?> aProvider, Provider<?> tProvider) {
    return new Child_MembersInjector<T>((Provider<T>) (xProvider), (Provider<A>) (yProvider), (Provider<A2>) (a2Provider), (Provider<A>) (aProvider), (Provider<T>) (tProvider));
  }

  @InjectedFieldSignature("test.Child.a")
  public static <T> void injectA(Object instance, Object a) {
    ((Child<T>) (instance)).a = (A) (a);
  }

  @InjectedFieldSignature("test.Child.t")
  public static <T> void injectT(Object instance, Object t) {
    ((Child<T>) (instance)).t = (T) (t);
  }
}
